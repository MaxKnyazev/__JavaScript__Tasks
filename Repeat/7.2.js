// ************************************ Свойства - геттеры и сеттеры:

// --- Геттеры и сеттеры ---

// Свойства-аксессоры представлены методами: «геттер» – для чтения и «сеттер» – для записи. При литеральном объявлении объекта они обозначаются get и set:
//
//   let obj = {
//     get propName() {
//       // геттер, срабатывает при чтении obj.propName
//     },
//
//     set propName(value) {
//       // сеттер, срабатывает при записи obj.propName = value
//     }
//   };



// --- Delete ---
// Нет поддержки для delete
// При попытке удалить свойство-аксессор оператором delete будет ошибка.



// --- Дескрипторы свойств доступа ---

// Дескрипторы свойств-аксессоров отличаются от «обычных» свойств-данных.
//
//   Свойства-аксессоры не имеют value и writable, но взамен предлагают функции get и set.
//
//   То есть, дескриптор аксессора может иметь:
//
//   get – функция без аргументов, которая сработает при чтении свойства,
//   set – функция, принимающая один аргумент, вызываемая при присвоении свойства,
//   enumerable – то же самое, что и для свойств-данных,
//   configurable – то же самое, что и для свойств-данных.



// --- Умные геттеры/сеттеры ---

// Геттеры/сеттеры можно использовать как обёртки над «реальными» значениями свойств, чтобы получить больше контроля над операциями с ними.
// Например, если мы хотим запретить устанавливать короткое имя для user, мы можем использовать сеттер name для проверки, а само значение хранить в отдельном свойстве _name

// let user = {
//   get name() {
//     return this._name;
//   },
//
//   set name(value) {
//     if (value.length < 4) {
//       console.log("Имя слишком короткое, должно быть более 4 символов");
//       return;
//     }
//     this._name = value;
//   }
// };
//
// user.name = "Pete";
// console.log(user.name); // Pete
//
// user.name = ""; // Имя слишком короткое...



